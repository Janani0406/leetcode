/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

int compare(const void *a, const void *b){
    if((*(const int*)a > *(const int*)b)) return 1;
    if((*(const int*)a < *(const int*)b)) return -1;
    return 0;
}
int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    qsort(nums, numsSize, sizeof(int), compare);

    int **res = malloc(300000 * sizeof(int*)); // 假設最多有 3000 個結果
    *returnColumnSizes = malloc(300000 * sizeof(int));
    int resIndex = 0;

    for (int i = 0; i < numsSize - 2; i++) {
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue; // 跳過重複的數字
        }
        int left = i + 1;
        int right = numsSize - 1;
        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];
            if (sum == 0) {
                res[resIndex] = malloc(3 * sizeof(int)); // 為當前結果分配空間
                res[resIndex][0] = nums[i];
                res[resIndex][1] = nums[left];
                res[resIndex][2] = nums[right];
                (*returnColumnSizes)[resIndex] = 3; // 每個子數組大小為 3
                resIndex++;

                // 移動指針並跳過所有重複的數字
                while (left < right && nums[left] == nums[left + 1]) left++;
                while (left < right && nums[right] == nums[right - 1]) right--;
                left++;
                right--;
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
    }

    *returnSize = resIndex; // 設定返回的大小
    return res;
}
