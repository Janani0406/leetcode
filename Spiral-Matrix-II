/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** generateMatrix(int n, int* returnSize, int** returnColumnSizes){
    int** matrix = malloc(sizeof(int*) * n);
    *returnColumnSizes = malloc(sizeof(int) * n);

    for(int i = 0; i < n; i++){
        matrix[i] = malloc(sizeof(int) * n);
        (*returnColumnSizes)[i] = n;
    }
        
    *returnSize = n;

    int TopWall = 0;
    int RightWall = n;
    int BottomWall = n;
    int LeftWall = -1;

    int value = 0;

    while(value < n*n){
        for(int i = LeftWall + 1; i < RightWall; i++){
            matrix[TopWall][i] = value + 1;
            value++;
        }
        RightWall--;
        
        for(int i = TopWall + 1; i < BottomWall; i++){
            matrix[i][RightWall] = value + 1;
            value++;
        }
        BottomWall--;

        for(int i = RightWall - 1; i > LeftWall; i--){
            matrix[BottomWall][i] = value + 1;
            value++;
        }
        LeftWall++;

        for(int i = BottomWall - 1; i > TopWall; i--){
            matrix[i][LeftWall] = value + 1;
            value++;
        }
        TopWall++;
    }

    return matrix;
}
