/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int compareIntervals(const void* a, const void* b)
{
    int* intervalA = *(int**)a;
    int* intervalB = *(int**)b;
    return intervalA[0] - intervalB[0];
}

int** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes) {

    int** allIntervals = (int**)malloc((intervalsSize+1)*sizeof(int*));
    for (int i=0;i<intervalsSize;i++)
    {
        allIntervals[i] = (int*)malloc(2*sizeof(int));
        allIntervals[i][0] = intervals[i][0];
        allIntervals[i][1] = intervals[i][1];
    }

    allIntervals[intervalsSize] = (int*)malloc(2*sizeof(int));
    allIntervals[intervalsSize][0] = newInterval[0];
    allIntervals[intervalsSize][1] = newInterval[1];
    qsort(allIntervals,intervalsSize+1, sizeof(int*),compareIntervals);
    int** mergedIntervals = (int**)malloc((intervalsSize+1)*sizeof(int*));
    *returnColumnSizes = (int*)malloc((intervalsSize+1)*sizeof(int));
    int count=0;
    for(int i=0;i<=intervalsSize;i++)
    {
        if(count == 0 || mergedIntervals[count-1][1]< allIntervals[i][0])
        {
            mergedIntervals[count] = (int*)malloc(2*sizeof(int));
            mergedIntervals[count][0] = allIntervals[i][0];
            mergedIntervals[count][1] = allIntervals[i][1];
            (*returnColumnSizes)[count] = 2;
            count++;
        }else 
        {
            mergedIntervals[count-1][1] = mergedIntervals[count-1][1]>allIntervals[i][1] ?
              mergedIntervals[count-1][1]:allIntervals[i][1];
        }
    }

    for(int i=0;i<=intervalsSize;i++){free(allIntervals[i]);}
    free(allIntervals);
    *returnSize = count;
    return mergedIntervals;


    
}
