/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char** fullJustify(char** words, int wordsSize, int maxWidth, int* returnSize) {
    int* len = calloc(wordsSize, sizeof(int));
    for(int i=0; i<wordsSize; i++){
        len[i] = strlen(words[i]);
    }

    char** ret = calloc(wordsSize, sizeof(char*));
    int lines = 0;
    int next_word = 0;
    while(next_word < wordsSize) {
        char* line = malloc(maxWidth+1);
        memset(line, ' ', maxWidth);
        line[maxWidth] = 0;

        ret[lines] = line;
        lines += 1;
        int cap = maxWidth+1;
        int line_start = next_word;
        while(next_word < wordsSize && cap > len[next_word]){
            cap -= len[next_word] + 1;
            next_word += 1;
        }
        if(next_word == wordsSize) {
            // last line
            for(int i=line_start; i<next_word; i++){
                memcpy(line, words[i], len[i]);
                line += len[i]+1;
            }
        } else {
            if(next_word - line_start == 1) {
                // one-word line
                memcpy(line, words[line_start], len[line_start]);
            } else {
                int spaces = cap / (next_word - line_start - 1);
                int extra_spaces = cap - spaces * (next_word - line_start - 1);
                //printf("line %d: words=%d, spaces=1+%d, extra_spaces=%d, cap=%d\n", lines, next_word - line_start, spaces, extra_spaces, cap);
                for(int i=line_start; i<next_word; i++){
                    memcpy(line, words[i], len[i]);
                    line += len[i]+1+spaces+(i-line_start<extra_spaces);
                }
            }
        }
    }
    free(len);
    *returnSize = lines;
    return ret;
}
