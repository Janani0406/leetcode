int max(int*list, int size) {
    int max = 0;
    for (int i = 0; i < size; i++) {
        if (list[i] > max) {
            max = list[i];
        }
    }
    return max;
}


int sum(int*list, int size) {
    int s = 0;
    for (int i = 0; i < size; i++) {
        s += list[i];
    }
    return s;
}


int trap(int* height, int heightSize) {
    int max_height = max(height, heightSize);
    int left_max = 0;
    int left_empty_volume = 0;
    for (int i = 0; i < heightSize; i++) {
        int h = height[i];
        if (h == max_height) break;
        if (h > left_max) left_max = h;
        left_empty_volume += max_height - left_max;
    }
    int right_max = 0;
    int right_empty_volume = 0;
    for (int i = heightSize-1; i >= 0; i--) {
        int h = height[i];
        if (h == max_height) break;
        if (h > right_max) right_max = h;
        right_empty_volume += max_height - right_max;
    }
    int total_volume = max_height * heightSize;
    int empty_volume = left_empty_volume + right_empty_volume;
    int rain_volume = total_volume - empty_volume - sum(height, heightSize);
    return rain_volume;
}
