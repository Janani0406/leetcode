#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

// Function to initialize the solution board
void initBoard(char** board, int n) {
    for (int i = 0; i < n; ++i) {
        board[i] = (char*)malloc((n + 1) * sizeof(char));
        memset(board[i], '.', n);
        board[i][n] = '\0';
    }
}

// Function to print the board (for debugging purposes)
void printBoard(char** board, int n) {
    for (int i = 0; i < n; ++i) {
        printf("%s\n", board[i]);
    }
    printf("\n");
}

// Function to check if a queen can be placed on board[row][col]
bool isSafe(char** board, int row, int col, int n) {
    // Check this row on left side
    for (int i = 0; i < col; ++i) {
        if (board[row][i] == 'Q') {
            return false;
        }
    }

    // Check upper diagonal on left side
    for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) {
        if (board[i][j] == 'Q') {
            return false;
        }
    }

    // Check lower diagonal on left side
    for (int i = row, j = col; j >= 0 && i < n; ++i, --j) {
        if (board[i][j] == 'Q') {
            return false;
        }
    }

    return true;
}

// Function to solve the N Queens problem using backtracking
void solveNQUtil(char*** result, int* returnSize, char** board, int col, int n) {
    if (col >= n) {
        result[*returnSize] = (char**)malloc(n * sizeof(char*));
        for (int i = 0; i < n; ++i) {
            result[*returnSize][i] = strdup(board[i]);
        }
        ++(*returnSize);
        return;
    }

    for (int i = 0; i < n; ++i) {
        if (isSafe(board, i, col, n)) {
            board[i][col] = 'Q';
            solveNQUtil(result, returnSize, board, col + 1, n);
            board[i][col] = '.';  // Backtrack
        }
    }
}

// Main function to solve the N Queens problem
char*** solveNQueens(int n, int* returnSize, int** returnColumnSizes) {
    char*** result = (char***)malloc(1000 * sizeof(char**));  // Assumption: Max 1000 solutions
    *returnSize = 0;
    *returnColumnSizes = (int*)malloc(1000 * sizeof(int));
    char** board = (char**)malloc(n * sizeof(char*));
    
    initBoard(board, n);

    solveNQUtil(result, returnSize, board, 0, n);

    for (int i = 0; i < *returnSize; ++i) {
        (*returnColumnSizes)[i] = n;
    }

    for (int i = 0; i < n; ++i) {
        free(board[i]);
    }
    free(board);

    return result;
}

// Function to free the memory allocated for the result
void freeResult(char*** result, int returnSize, int n) {
    for (int i = 0; i < returnSize; ++i) {
        for (int j = 0; j < n; ++j) {
            free(result[i][j]);
        }
        free(result[i]);
    }
    free(result);
}

// Main function (for local testing)
int Main() {
    int n = 4;  // Change this value to solve for a different size chessboard
    int returnSize;
    int* returnColumnSizes;
    char*** result = solveNQueens(n, &returnSize, &returnColumnSizes);

    for (int i = 0; i < returnSize; ++i) {
        for (int j = 0; j < n; ++j) {
            printf("%s\n", result[i][j]);
        }
        printf("\n");
    }

    free(returnColumnSizes);
    freeResult(result, returnSize, n);

    return 0;
}
