/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
#include <stdio.h>
#include <stdlib.h>

// Comparator function to sort intervals by their start value
int compare(const void *a, const void *b) {
    return ((int**)a)[0][0] - ((int**)b)[0][0];
}

int** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes) {
    if (intervalsSize == 0) {
        *returnSize = 0;
        *returnColumnSizes = NULL;
        return NULL;
    }

    // Sort intervals by their start time
    qsort(intervals, intervalsSize, sizeof(int*), compare);

    // Allocate memory for the result array
    int** merged = (int**)malloc(intervalsSize * sizeof(int*));
    *returnColumnSizes = (int*)malloc(intervalsSize * sizeof(int));
    int mergedCount = 0;

    // Start with the first interval
    merged[mergedCount] = (int*)malloc(2 * sizeof(int));
    merged[mergedCount][0] = intervals[0][0];
    merged[mergedCount][1] = intervals[0][1];
    (*returnColumnSizes)[mergedCount] = 2;  // each interval has size 2 (start and end)
    mergedCount++;

    // Iterate through the intervals and merge
    for (int i = 1; i < intervalsSize; i++) {
        // Check if the current interval overlaps with the last merged one
        if (intervals[i][0] <= merged[mergedCount - 1][1]) {
            // Merge the intervals by extending the end of the last merged one
            merged[mergedCount - 1][1] = (merged[mergedCount - 1][1] > intervals[i][1]) ?
                                        merged[mergedCount - 1][1] : intervals[i][1];
        } else {
            // No overlap, add the new interval
            merged[mergedCount] = (int*)malloc(2 * sizeof(int));
            merged[mergedCount][0] = intervals[i][0];
            merged[mergedCount][1] = intervals[i][1];
            (*returnColumnSizes)[mergedCount] = 2;
            mergedCount++;
        }
    }

    // Set the returnSize
    *returnSize = mergedCount;
    return merged;
}
